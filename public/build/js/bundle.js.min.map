{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","formatearPonentes","arrayPonentes","ponente","nombre","trim","apellido","id","seleccionarPonente","ponentePrevio","ponenteId","obtenerPonentes","length","expresion","RegExp","normalize","replace","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if(horas) {\r\n\r\n        let busqueda = {\r\n            categoria_id: '', \r\n            dia: ''\r\n        }\r\n\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        dias.forEach(dia => { dia.addEventListener('change', terminoBusqueda)});\r\n        \r\n        function terminoBusqueda(e) {\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // Reiniciar los campos ocultos y el selector de horas \r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            if(Object.values(busqueda).includes('')) { // si encuentra en el objeto un valor vacio no continua la ejecucion del codigo\r\n                return;\r\n            }\r\n            \r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n\r\n            // aplicar destruction para no usar obj.propiedad\r\n            const {dia, categoria_id} = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => {li.classList.add('horas__hora--desahabilitada')});\r\n            \r\n            // Comprobar eventos con horas tomadas\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            const listadoHorasArray = Array.from(listadoHoras); // pasar de NodeList a Array para posteriormente poder usar el filter que solo toma arrays\r\n\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId)); // negar para habilitar lso disponibles\r\n            resultado.forEach(li => { li.classList.remove('horas__hora--desahabilitada')});            \r\n\r\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--desahbilitada');\r\n            horasDisponibles.forEach(hora => {\r\n                hora.addEventListener('click', seleccionarHora);\r\n            });\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            // Desabilitar la hora previa si hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n            // Agregar clase de seleccionamiento\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n            \r\n            //llenar el campo oculto de dia\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();","(function () {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if (ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n        async function obtenerPonentes() {\r\n            const url = `/api/ponentes`;\r\n\r\n            const resultado = await fetch(url);\r\n            const ponentes = await resultado.json();\r\n\r\n            formatearPonentes(ponentes);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value;\r\n\r\n            if (busqueda.length > 3) {\r\n                const expresion = new RegExp(busqueda.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\"), \"i\");\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if (ponente.nombre.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().search(expresion) != -1) {\r\n                        return ponente\r\n                    }\r\n                })\r\n            } else {\r\n                ponentesFiltrados = []\r\n            }\r\n\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n            while (listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild)\r\n            }\r\n\r\n            if(ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n    \r\n                    // Añadir al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                })\r\n            } else {\r\n                const noResultados = document.createElement('P');\r\n                noResultados.classList.add('listado-ponentes__no-resultado');\r\n                noResultados.textContent = 'No hay resultados para tu busqueda';\r\n                listadoPonentes.appendChild(noResultados);\r\n            }\r\n        }\r\n\r\n        function seleccionarPonente(e) {\r\n            const ponente = e.target;\r\n\r\n            // Remover la clase previa\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            \r\n            if(ponentePrevio) {\r\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado');\r\n            }\r\n\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n        \r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function() {\r\n\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector('#tags');\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar el input oculto\r\n        if(tagsInputHidden !== '') {\r\n            tags = tagsInputHidden.value.split(','); // de string a array\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n        \r\n        function guardarTag(e) {\r\n            \r\n            if(e.keyCode === 44) {\r\n\r\n                if(e.target.value.trim() === '' || e.target.value < 1) {\r\n                    return;\r\n                }\r\n\r\n                e.preventDefault();\r\n                \r\n                tags = [...tags, e.target.value.trim()]; // copia de arreglo y agregando uno nuevo\r\n                tagsInput.value = '';\r\n                mostrarTags();                \r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) { // a que le presionamos\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent); // elimina al que se le dio el click\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString(); // rellenamos el valor del value como strings dentro del \"\"\r\n        }\r\n    }\r\n})()"]}